// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace KartKraft
{
    using global::FlatBuffers;

    /// Root object from which all data can be extracted. You must check if motion, dash etc exist before using as not every packet will include all data.
    public struct Frame : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
        public static Frame GetRootAsFrame(ByteBuffer _bb) { return GetRootAsFrame(_bb, new Frame()); }
        public static Frame GetRootAsFrame(ByteBuffer _bb, Frame obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public static bool FrameBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "KKFB"); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public Frame __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public float Timestamp { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
        public KartKraft.Motion? Motion { get { int o = __p.__offset(6); return o != 0 ? (KartKraft.Motion?)(new KartKraft.Motion()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
        public KartKraft.Dashboard? Dash { get { int o = __p.__offset(8); return o != 0 ? (KartKraft.Dashboard?)(new KartKraft.Dashboard()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
        public KartKraft.Session? Session { get { int o = __p.__offset(10); return o != 0 ? (KartKraft.Session?)(new KartKraft.Session()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
        public KartKraft.VehicleConfig? VehicleConfig { get { int o = __p.__offset(12); return o != 0 ? (KartKraft.VehicleConfig?)(new KartKraft.VehicleConfig()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
        public KartKraft.TrackConfig? TrackConfig { get { int o = __p.__offset(14); return o != 0 ? (KartKraft.TrackConfig?)(new KartKraft.TrackConfig()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
        public KartKraft.SessionConfig? SessionConfig { get { int o = __p.__offset(16); return o != 0 ? (KartKraft.SessionConfig?)(new KartKraft.SessionConfig()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

        public static Offset<KartKraft.Frame> CreateFrame(FlatBufferBuilder builder,
            float timestamp = 0.0f,
            Offset<KartKraft.Motion> motionOffset = default(Offset<KartKraft.Motion>),
            Offset<KartKraft.Dashboard> dashOffset = default(Offset<KartKraft.Dashboard>),
            Offset<KartKraft.Session> sessionOffset = default(Offset<KartKraft.Session>),
            Offset<KartKraft.VehicleConfig> vehicleConfigOffset = default(Offset<KartKraft.VehicleConfig>),
            Offset<KartKraft.TrackConfig> trackConfigOffset = default(Offset<KartKraft.TrackConfig>),
            Offset<KartKraft.SessionConfig> sessionConfigOffset = default(Offset<KartKraft.SessionConfig>))
        {
            builder.StartTable(7);
            Frame.AddSessionConfig(builder, sessionConfigOffset);
            Frame.AddTrackConfig(builder, trackConfigOffset);
            Frame.AddVehicleConfig(builder, vehicleConfigOffset);
            Frame.AddSession(builder, sessionOffset);
            Frame.AddDash(builder, dashOffset);
            Frame.AddMotion(builder, motionOffset);
            Frame.AddTimestamp(builder, timestamp);
            return Frame.EndFrame(builder);
        }

        public static void StartFrame(FlatBufferBuilder builder) { builder.StartTable(7); }
        public static void AddTimestamp(FlatBufferBuilder builder, float timestamp) { builder.AddFloat(0, timestamp, 0.0f); }
        public static void AddMotion(FlatBufferBuilder builder, Offset<KartKraft.Motion> motionOffset) { builder.AddOffset(1, motionOffset.Value, 0); }
        public static void AddDash(FlatBufferBuilder builder, Offset<KartKraft.Dashboard> dashOffset) { builder.AddOffset(2, dashOffset.Value, 0); }
        public static void AddSession(FlatBufferBuilder builder, Offset<KartKraft.Session> sessionOffset) { builder.AddOffset(3, sessionOffset.Value, 0); }
        public static void AddVehicleConfig(FlatBufferBuilder builder, Offset<KartKraft.VehicleConfig> vehicleConfigOffset) { builder.AddOffset(4, vehicleConfigOffset.Value, 0); }
        public static void AddTrackConfig(FlatBufferBuilder builder, Offset<KartKraft.TrackConfig> trackConfigOffset) { builder.AddOffset(5, trackConfigOffset.Value, 0); }
        public static void AddSessionConfig(FlatBufferBuilder builder, Offset<KartKraft.SessionConfig> sessionConfigOffset) { builder.AddOffset(6, sessionConfigOffset.Value, 0); }
        public static Offset<KartKraft.Frame> EndFrame(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            return new Offset<KartKraft.Frame>(o);
        }
        public static void FinishFrameBuffer(FlatBufferBuilder builder, Offset<KartKraft.Frame> offset) { builder.Finish(offset.Value, "KKFB"); }
        public static void FinishSizePrefixedFrameBuffer(FlatBufferBuilder builder, Offset<KartKraft.Frame> offset) { builder.FinishSizePrefixed(offset.Value, "KKFB"); }
    };
}
