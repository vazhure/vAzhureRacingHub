// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace KartKraft
{
    using global::FlatBuffers;

    /// Basic vehicle data for live timing. e.g. trackmap
    public struct Vehicle : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
        public static Vehicle GetRootAsVehicle(ByteBuffer _bb) { return GetRootAsVehicle(_bb, new Vehicle()); }
        public static Vehicle GetRootAsVehicle(ByteBuffer _bb, Vehicle obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public Vehicle __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public KartKraft.VehicleState State { get { int o = __p.__offset(4); return o != 0 ? (KartKraft.VehicleState)__p.bb.Get(o + __p.bb_pos) : KartKraft.VehicleState.Idle; } }
        public float PosX { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
        public float PosY { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
        public float PosZ { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
        public float Yaw { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
        public int SessionPos { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
        public KartKraft.Color? Color { get { int o = __p.__offset(16); return o != 0 ? (KartKraft.Color?)(new KartKraft.Color()).__assign(o + __p.bb_pos, __p.bb) : null; } }
        public float NormalisedTrackPos { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

        public static void StartVehicle(FlatBufferBuilder builder) { builder.StartTable(8); }
        public static void AddState(FlatBufferBuilder builder, KartKraft.VehicleState state) { builder.AddByte(0, (byte)state, 0); }
        public static void AddPosX(FlatBufferBuilder builder, float posX) { builder.AddFloat(1, posX, 0.0f); }
        public static void AddPosY(FlatBufferBuilder builder, float posY) { builder.AddFloat(2, posY, 0.0f); }
        public static void AddPosZ(FlatBufferBuilder builder, float posZ) { builder.AddFloat(3, posZ, 0.0f); }
        public static void AddYaw(FlatBufferBuilder builder, float yaw) { builder.AddFloat(4, yaw, 0.0f); }
        public static void AddSessionPos(FlatBufferBuilder builder, int sessionPos) { builder.AddInt(5, sessionPos, 0); }
        public static void AddColor(FlatBufferBuilder builder, Offset<KartKraft.Color> colorOffset) { builder.AddStruct(6, colorOffset.Value, 0); }
        public static void AddNormalisedTrackPos(FlatBufferBuilder builder, float normalisedTrackPos) { builder.AddFloat(7, normalisedTrackPos, 0.0f); }
        public static Offset<KartKraft.Vehicle> EndVehicle(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            return new Offset<KartKraft.Vehicle>(o);
        }
    };


}
