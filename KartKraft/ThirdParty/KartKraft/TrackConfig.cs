// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace KartKraft
{
    using global::System;
    using global::FlatBuffers;

    public struct TrackConfig : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
        public static TrackConfig GetRootAsTrackConfig(ByteBuffer _bb) { return GetRootAsTrackConfig(_bb, new TrackConfig()); }
        public static TrackConfig GetRootAsTrackConfig(ByteBuffer _bb, TrackConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public TrackConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
        public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
        public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
        public byte NumSectors { get { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
        public float TrackLengthMetres { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
        public string Address { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAddressBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
        public ArraySegment<byte>? GetAddressBytes() { return __p.__vector_as_arraysegment(10); }
#endif
        public byte[] GetAddressArray() { return __p.__vector_as_array<byte>(10); }
        public string CountryCode { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCountryCodeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
        public ArraySegment<byte>? GetCountryCodeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
        public byte[] GetCountryCodeArray() { return __p.__vector_as_array<byte>(12); }

        public static Offset<KartKraft.TrackConfig> CreateTrackConfig(FlatBufferBuilder builder,
            StringOffset nameOffset = default(StringOffset),
            byte numSectors = 0,
            float trackLengthMetres = 0.0f,
            StringOffset addressOffset = default(StringOffset),
            StringOffset countryCodeOffset = default(StringOffset))
        {
            builder.StartTable(5);
            TrackConfig.AddCountryCode(builder, countryCodeOffset);
            TrackConfig.AddAddress(builder, addressOffset);
            TrackConfig.AddTrackLengthMetres(builder, trackLengthMetres);
            TrackConfig.AddName(builder, nameOffset);
            TrackConfig.AddNumSectors(builder, numSectors);
            return TrackConfig.EndTrackConfig(builder);
        }

        public static void StartTrackConfig(FlatBufferBuilder builder) { builder.StartTable(5); }
        public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
        public static void AddNumSectors(FlatBufferBuilder builder, byte numSectors) { builder.AddByte(1, numSectors, 0); }
        public static void AddTrackLengthMetres(FlatBufferBuilder builder, float trackLengthMetres) { builder.AddFloat(2, trackLengthMetres, 0.0f); }
        public static void AddAddress(FlatBufferBuilder builder, StringOffset addressOffset) { builder.AddOffset(3, addressOffset.Value, 0); }
        public static void AddCountryCode(FlatBufferBuilder builder, StringOffset countryCodeOffset) { builder.AddOffset(4, countryCodeOffset.Value, 0); }
        public static Offset<KartKraft.TrackConfig> EndTrackConfig(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            return new Offset<KartKraft.TrackConfig>(o);
        }
    };
}
